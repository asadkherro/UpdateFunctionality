name: Deploy

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x

    - name: Install MAUI Workload
      run: dotnet workload install maui

    - name: Restore
      run: dotnet restore
      working-directory: ./UpdateFunctionality

    - name: Build
      run: dotnet build -c Release -f:net9.0-windows10.0.19041.0
      working-directory: ./UpdateFunctionality

    - name: Decode Signing Certificate
      run: |
        echo "${{ secrets.SIGNING_CERTIFICATE_BASE_64_CONTENT }}" > cert.asc
        certutil -decode cert.asc cert.pfx

    - name: Install Signing Certficiate
      run: certutil -user -p ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }} -Silent -importpfx cert.pfx NoRoot

    - name: Publish
      run: dotnet publish -c Release -f:net9.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint=${{ secrets.SIGNING_CERTIFICATE_THUMBPRINT }}
      working-directory: ./UpdateFunctionality

    - name : VerifyPath
      shell : pwsh
      run : $projectPath = Join-Path -Path $PWD -ChildPath "UpdateFunctionality"
            $binPath = Join-Path -Path $projectPath -ChildPath "bin\Release"
            Write-Host "Checking for files under $binPath"
            Get-ChildItem -Recurse $binPath -Include *.msix, *.cer | ForEach-Object {
            Write-Host $_.FullName }

    - name : Upload
      uses : actions/upload-artifact@v4
      with :
        name : Build
        path : |
            UpdateFunctionality/UpdateFunctionality/bin/Release/net9.0-windows10.0.19041.0/win10-x64/publish/AppPackages/UpdateFunctionality_1.0.0.1_Test/UpdateFunctionality_1.0.0.1_x64.msix
            UpdateFunctionality/UpdateFunctionality/bin/Release/net9.0-windows10.0.19041.0/win10-x64/publish/AppPackages/UpdateFunctionality_1.0.0.1_Test/UpdateFunctionality_1.0.0.1_x64.cer

    # - name: Extract Version
    #   id: extractVersion
    #   shell: pwsh
    #   run: |
    #     $xml = [Xml] (Get-Content ./UpdateFunctionality/UpdateFunctionality.csproj)
    #     [string] $version = [Version] $xml.Project.PropertyGroup.ApplicationDisplayVersion
    #     echo "version=$($version)" >> $env:GITHUB_OUTPUT

    # - name: Create Tag If Not Exists
    #   uses: actions/github-script@v5
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const tag = 'refs/tags/v${{ steps.extractVersion.outputs.version }}';
    #       try {
    #         await github.rest.git.getRef({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           ref: tag.replace('refs/', ''),
    #         });
    #         console.log(`Tag ${tag} already exists, skipping creation.`);
    #       } catch (error) {
    #         if (error.status === 404) {
    #           await github.rest.git.createRef({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             sha: context.sha,
    #             ref: tag,
    #           });
    #           console.log(`Tag ${tag} created.`);
    #         } else {
    #           throw error;
    #         }
    #       }
   
    # - name: Create Release
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: v${{â€¯steps.extractVersion.outputs.version }}
    #     files: | 
    #       ./UpdateFunctionality/bin/Release/net9.0-windows10.0.19041.0/win10-x64/publish/AppPackages/**/*.msix
    #       ./UpdateFunctionality/bin/Release/net9.0-windows10.0.19041.0/win10-x64/publish/AppPackages/**/*.cer
    #       ./UpdateFunctionality/bin/Release/net9.0-windows10.0.19041.0/win10-x64/publish/**/*.appinstaller
